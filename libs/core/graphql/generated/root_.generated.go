// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Application struct {
		ID      func(childComplexity int) int
		Name    func(childComplexity int) int
		Version func(childComplexity int) int
	}

	ApplicationPagination struct {
		Items  func(childComplexity int) int
		Paging func(childComplexity int) int
	}

	CursorPaging struct {
		Next     func(childComplexity int) int
		Previous func(childComplexity int) int
		Total    func(childComplexity int) int
	}

	Mutation struct {
		CreateApplication func(childComplexity int, input NewApplication) int
		CreateRoute       func(childComplexity int, input NewRoute) int
	}

	Query struct {
		Applications func(childComplexity int) int
		Routes       func(childComplexity int) int
	}

	Route struct {
		ID func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(ctx context.Context, typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Application.id":
		if e.complexity.Application.ID == nil {
			break
		}

		return e.complexity.Application.ID(childComplexity), true

	case "Application.name":
		if e.complexity.Application.Name == nil {
			break
		}

		return e.complexity.Application.Name(childComplexity), true

	case "Application.version":
		if e.complexity.Application.Version == nil {
			break
		}

		return e.complexity.Application.Version(childComplexity), true

	case "ApplicationPagination.items":
		if e.complexity.ApplicationPagination.Items == nil {
			break
		}

		return e.complexity.ApplicationPagination.Items(childComplexity), true

	case "ApplicationPagination.paging":
		if e.complexity.ApplicationPagination.Paging == nil {
			break
		}

		return e.complexity.ApplicationPagination.Paging(childComplexity), true

	case "CursorPaging.next":
		if e.complexity.CursorPaging.Next == nil {
			break
		}

		return e.complexity.CursorPaging.Next(childComplexity), true

	case "CursorPaging.previous":
		if e.complexity.CursorPaging.Previous == nil {
			break
		}

		return e.complexity.CursorPaging.Previous(childComplexity), true

	case "CursorPaging.total":
		if e.complexity.CursorPaging.Total == nil {
			break
		}

		return e.complexity.CursorPaging.Total(childComplexity), true

	case "Mutation.createApplication":
		if e.complexity.Mutation.CreateApplication == nil {
			break
		}

		args, err := ec.field_Mutation_createApplication_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateApplication(childComplexity, args["input"].(NewApplication)), true

	case "Mutation.createRoute":
		if e.complexity.Mutation.CreateRoute == nil {
			break
		}

		args, err := ec.field_Mutation_createRoute_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRoute(childComplexity, args["input"].(NewRoute)), true

	case "Query.applications":
		if e.complexity.Query.Applications == nil {
			break
		}

		return e.complexity.Query.Applications(childComplexity), true

	case "Query.routes":
		if e.complexity.Query.Routes == nil {
			break
		}

		return e.complexity.Query.Routes(childComplexity), true

	case "Route.id":
		if e.complexity.Route.ID == nil {
			break
		}

		return e.complexity.Route.ID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputNewApplication,
		ec.unmarshalInputNewRoute,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema/root.graphql", Input: `interface PageItem {
    id: ID!
}

type CursorPaging {
    next: ID!
    previous: ID!
    total: Int!
}

interface CursorPagination {
    items: [PageItem]
    paging: CursorPaging!
}
`, BuiltIn: false},
	{Name: "../../feature/application/graphql/schema/application.graphql", Input: `input NewApplication {
    name: String!
    version: String!
}

type Application implements PageItem {
    id: ID!
    name: String!
    version: String!
}

type ApplicationPagination implements CursorPagination {
    items: [Application]
    paging: CursorPaging!
}


extend type Mutation {
    createApplication(input: NewApplication!): Application!
}

extend type Query {
    applications: [Application!]!
#    applicationsPaginated(size: Int!, after: String, before: String): ApplicationPagination
}`, BuiltIn: false},
	{Name: "../../feature/resource/route/graphql/schema/route.graphql", Input: `input NewRoute {
    name: String!
}

type Route {
    id: ID!
}

extend type Mutation {
    createRoute(input: NewRoute!): Route!
}

extend type Query {
    routes: [Route]
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

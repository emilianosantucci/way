// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

type CursorPagination interface {
	IsCursorPagination()
	GetItems() []PageItem
	GetPaging() *CursorPaging
}

type PageItem interface {
	IsPageItem()
	GetID() string
}

type Application struct {
	ID      string `json:"id"`
	Name    string `json:"name"`
	Version string `json:"version"`
}

func (Application) IsPageItem()        {}
func (this Application) GetID() string { return this.ID }

type ApplicationPagination struct {
	Items  []*Application `json:"items,omitempty"`
	Paging *CursorPaging  `json:"paging"`
}

func (ApplicationPagination) IsCursorPagination() {}
func (this ApplicationPagination) GetItems() []PageItem {
	if this.Items == nil {
		return nil
	}
	interfaceSlice := make([]PageItem, 0, len(this.Items))
	for _, concrete := range this.Items {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this ApplicationPagination) GetPaging() *CursorPaging { return this.Paging }

type CursorPaging struct {
	Next     string `json:"next"`
	Previous string `json:"previous"`
	Total    int    `json:"total"`
}

type NewApplication struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

type NewRoute struct {
	Name string `json:"name"`
}

type Route struct {
	ID string `json:"id"`
}

// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

type CursorPagination interface {
	IsCursorPagination()
	GetData() []PageItem
	GetPage() *CursorPage
}

type PageItem interface {
	IsPageItem()
	GetID() string
}

type Application struct {
	ID      string `json:"id"`
	Name    string `json:"name"`
	Version string `json:"version"`
}

func (Application) IsPageItem()        {}
func (this Application) GetID() string { return this.ID }

type ApplicationPagination struct {
	Data []*Application `json:"data,omitempty"`
	Page *CursorPage    `json:"page"`
}

func (ApplicationPagination) IsCursorPagination() {}
func (this ApplicationPagination) GetData() []PageItem {
	if this.Data == nil {
		return nil
	}
	interfaceSlice := make([]PageItem, 0, len(this.Data))
	for _, concrete := range this.Data {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this ApplicationPagination) GetPage() *CursorPage { return this.Page }

type CursorPage struct {
	Previous *string `json:"previous,omitempty"`
	Next     *string `json:"next,omitempty"`
	Total    int     `json:"total"`
}

type NewApplication struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

type NewRoute struct {
	Name string `json:"name"`
}

type Route struct {
	ID string `json:"id"`
}

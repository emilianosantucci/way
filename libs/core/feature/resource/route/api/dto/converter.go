// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package dto

import (
	uuid "github.com/google/uuid"
	model "libs/core/feature/resource/route/service/model"
)

func NewConverter() Convert {
	return &Converter{}
}

type Converter struct{}

func (c *Converter) FromNewToModel(source *NewRoute, target *model.NewRoute) {
	if source != nil {
		target.Path = source.Path
		target.Name = source.Name
		target.Component = source.Component
		target.Description = source.Description
		target.IsActive = source.IsActive
	}
}

func (c *Converter) FromUpdateToModel(source *UpdateRoute, target *model.UpdateRoute) error {
	if source != nil {
		uuidUUID, err := uuid.Parse(source.ID)
		if err != nil {
			return err
		}
		target.ID = uuidUUID
		target.Path = source.Path
		target.Name = source.Name
		target.Component = source.Component
		target.Description = source.Description
		target.IsActive = source.IsActive
	}
	return nil
}

func (c *Converter) ToDto(source *model.Route, target *Route) {
	if source != nil {
		target.ID = c.uuidUUIDToUuidUUID(source.ID)
		target.Path = source.Path
		target.Name = source.Name
		target.Component = source.Component
		target.Description = source.Description
		target.IsActive = source.IsActive
	}
}

func (c *Converter) uuidUUIDToUuidUUID(source uuid.UUID) uuid.UUID {
	var uuidUUID uuid.UUID
	for i := 0; i < len(source); i++ {
		uuidUUID[i] = source[i]
	}
	return uuidUUID
}

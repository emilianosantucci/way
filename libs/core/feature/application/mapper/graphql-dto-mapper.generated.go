// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package mapper

import (
	common "libs/core/common"
	model "libs/core/feature/application/model"
	generated "libs/core/graphql/generated"
)

type GraphqlDtoMapper struct{}

func (c *GraphqlDtoMapper) FromNewToModel(source *generated.NewApplication, target *model.NewApplication) {
	if source != nil {
		target.Name = source.Name
		target.Version = source.Version
	}
}
func (c *GraphqlDtoMapper) ToDto(source *model.Application, target *generated.Application) {
	if source != nil {
		target.ID = common.UuidToString(source.ID)
		target.Name = source.Name
		target.Version = source.Version
	}
}
func (c *GraphqlDtoMapper) ToDtos(source []model.Application) []*generated.Application {
	var pGeneratedApplicationList []*generated.Application
	if source != nil {
		pGeneratedApplicationList = make([]*generated.Application, len(source))
		for i := 0; i < len(source); i++ {
			pGeneratedApplicationList[i] = c.modelApplicationToPGeneratedApplication(source[i])
		}
	}
	return pGeneratedApplicationList
}
func (c *GraphqlDtoMapper) modelApplicationToPGeneratedApplication(source model.Application) *generated.Application {
	var generatedApplication generated.Application
	generatedApplication.ID = common.UuidToString(source.ID)
	generatedApplication.Name = source.Name
	generatedApplication.Version = source.Version
	return &generatedApplication
}
